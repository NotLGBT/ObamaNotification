pipeline {
    agent any // Use any available agent
    parameters {
        string(name: 'acceptEula', defaultValue: 'YES', description: 'Microsoft policy agreement')
        string(name: 'edition', defaultValue: 'Developer', description: 'Choose a edition type Evaluation, Developer, Express, Web, Standard, Enterprise 1, EnterpriseCore 1, A product key')
        string(name: 'collation', defaultValue: 'SQL_Latin1_General_CP1_CI_AS', description: 'Unlock alphabet options visit for information https://learn.microsoft.com/en-us/sql/relational-databases/collations/collation-and-unicode-support?view=sql-server-ver16')
        string(name: 'dataDir', defaultValue: '/var/opt/mssql', description: 'MSSQL_DATA_DIR')
        string(name: 'lcid', defaultValue: '1033', description: 'Set language interface   1049 - Russian  1033 - English')
        string(name: 'hadr', defaultValue: '0', description: 'Enable availability group  1 - enabled 0 - disabled')
        string(name: 'replicaCount', defaultValue: '1', description: 'Quantity of instances')
        password(name: 'sapassword', defaultValue: 'MyStrongPassword1234@@@', description: 'password for DB')
        string(name: 'choosedOS', defaultValue: 'Ubuntu', description: "Choose between Ubuntu and REHL")
    }

    environment {
        CHART_REL_LINK1 = 'helm-charts/Templates/mssqlserver-2022'
        //CHART_REL_LINK2 = 'helm-charts/percona-mysql/ps-db'
        VALUES_FILE = 'values.yaml'
        KUB_NAMESPACE = 'databases'
        GIT_BRANCH = 'jenkins_pipeline'
        CHART_NAME1 = 'sql-202'
        //CHART_NAME2 = 'mysql-percona-db-jen-test'password
        BIT_SECRET = credentials('BITBUCKET_INNOCLOUD_READ')
        GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no'
    }

    stages {
        stage('Check Kube') {
            steps {
                echo "Running kubectl test"
                script {
                    // Ensure KUBECONFIG is set properly
                    withCredentials([file(credentialsId: 'k8s', variable: 'KUBECONFIG')]) {
                        sh "kubectl describe service --all-namespaces | grep -i nodeport"

                    }
                }
            }
        }

        stage('Install/Update Helm chart') {
            steps {
                // Assuming you're using credentials plugin to store your harbor credentials
                withCredentials([
                                 file(credentialsId: 'k8s' , variable: 'KUBECONFIG'),
                                 usernamePassword(credentialsId: 'HarborCredentials', passwordVariable: 'PASSWORD_VAR', usernameVariable: 'USERNAME')]) {
                //   helm list -a -n $KUB_NAMESPACE | grep "${CHART_NAME1}" | awk "{print $1}" | xargs -r -I % helm uninstall % -n $KUB_NAMESPACE
                  sh   '''
                       #!/bin/bash
                       set -e  
                         
                
                       git clone --filter=blob:none --no-checkout https://$BIT_SECRET@bitbucket.org/innowise-group/devops.git
                       cd devops/
                       git sparse-checkout set --cone
                       git checkout $GIT_BRANCH
                       git sparse-checkout set $CHART_REL_LINK1
                       helm dependency build $CHART_REL_LINK1
                       
                       helm install $CHART_NAME1 \
                       -f $CHART_REL_LINK1/$VALUES_FILE \
                       $CHART_REL_LINK1 \
                       --namespace $KUB_NAMESPACE \
                       --set acceptEula.value="n" \
                       --set edition.value="Developer" \
                       --set collation="SQL_Latin1_General_CP1_CI_AS" \
                       --set dataDir="/var/opt/mssql" \
                       --set lcid=1033 \
                       --set hadr=0 \
                       --set replicaCount=1 \
                       --set sapassword="MyStrongPassword1234@@@" \
                       --set image.choosedOS="Ubuntu"

                       '''
                       // --set auth.postgresPassword="${params.ROOT_PASSWORD}"
                       // helm install $CHART_NAME1-${params.DataBaseName} $CHART_REL_LINK1 -f $CHART_REL_LINK1/$VALUES_FILE --namespace $KUB_NAMESPACE --set auth.postgresPassword="${params.ROOT_PASSWORD}"
                      
                }
            }
        }
    }
    post {
        always {
            script {
                try {
                
                 def file = notificator(params.request, params.requestorType)
                 
                }
                catch (java.io.NotSerializableException e)
                {}
                 }
        }
    }
}